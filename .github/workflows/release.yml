name: Create Release

on:
  push:
    branches: [ main ]

jobs:
  # Primero ejecutar tests
  test:
    name: Run Tests
    runs-on: macos-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Select Xcode Version
      run: sudo xcode-select -s /Applications/Xcode_15.0.app/Contents/Developer

    - name: Build and Test Swift Package
      run: swift test --verbose

    - name: Build iOS Example
      run: |
        cd Example/VoticeDemo
        xcodebuild -project VoticeDemo.xcodeproj \
                   -scheme VoticeDemo \
                   -destination 'platform=iOS Simulator,name=iPhone 15,OS=17.0' \
                   build

    - name: Test iOS Example
      run: |
        cd Example/VoticeDemo
        xcodebuild -project VoticeDemo.xcodeproj \
                   -scheme VoticeDemo \
                   -destination 'platform=iOS Simulator,name=iPhone 15,OS=17.0' \
                   test

  # Solo crear release si los tests pasan
  release:
    name: Create Tag and Release
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Get latest tag
      id: get_tag
      run: |
        # Obtener el último tag
        LATEST_TAG=$(git tag --sort=-version:refname | head -n1)
        echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT
        
        # Incrementar versión patch
        if [[ $LATEST_TAG =~ ^([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
          MAJOR=${BASH_REMATCH[1]}
          MINOR=${BASH_REMATCH[2]}
          PATCH=${BASH_REMATCH[3]}
          NEW_PATCH=$((PATCH + 1))
          NEW_TAG="$MAJOR.$MINOR.$NEW_PATCH"
        else
          NEW_TAG="1.0.5"
        fi
        
        echo "new_tag=$NEW_TAG" >> $GITHUB_OUTPUT
        echo "Nuevo tag será: $NEW_TAG"

    - name: Create tag
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git tag ${{ steps.get_tag.outputs.new_tag }}
        git push origin ${{ steps.get_tag.outputs.new_tag }}

    - name: Generate changelog
      id: changelog
      run: |
        # Obtener commits desde el último tag
        COMMITS=$(git log ${{ steps.get_tag.outputs.latest_tag }}..HEAD --oneline --no-merges)
        
        # Crear changelog básico
        CHANGELOG="## Cambios en ${{ steps.get_tag.outputs.new_tag }}

$COMMITS

---
*Release generada automáticamente por GitHub Actions*"

        # Guardar changelog (escape para GitHub Actions)
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.get_tag.outputs.new_tag }}
        release_name: "Votice SDK v${{ steps.get_tag.outputs.new_tag }}"
        body: ${{ steps.changelog.outputs.changelog }}
        draft: false
        prerelease: false
