name: Create Release

on:
  push:
    branches: [ main ]

permissions:
  contents: write

jobs:
  test:
    name: Run Tests
    runs-on: macos-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Select Xcode Version
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '16.2'

    - name: List available simulators
      run: xcrun simctl list devices --json | jq '.devices | to_entries[] | select(.key | contains("iOS")) | .key'

    - name: Build and Test Swift Package
      run: swift test --verbose

    - name: Build iOS Example
      run: |
        cd Example/VoticeDemo
        
        # Try with iPhone 15 first
        if xcodebuild -project VoticeDemo.xcodeproj \
                      -scheme VoticeDemo \
                      -destination 'platform=iOS Simulator,name=iPhone 15' \
                      build \
                      CODE_SIGN_IDENTITY="" \
                      CODE_SIGNING_REQUIRED=NO; then
          echo "Build successful with iPhone 15"
        # Fallback to iPhone 14 if iPhone 15 is not available
        elif xcodebuild -project VoticeDemo.xcodeproj \
                        -scheme VoticeDemo \
                        -destination 'platform=iOS Simulator,name=iPhone 14' \
                        build \
                        CODE_SIGN_IDENTITY="" \
                        CODE_SIGNING_REQUIRED=NO; then
          echo "Build successful with iPhone 14"
        # Final fallback to any iOS simulator
        else
          echo "Trying with any available iOS simulator..."
          xcodebuild -project VoticeDemo.xcodeproj \
                     -scheme VoticeDemo \
                     -destination 'generic/platform=iOS Simulator' \
                     build \
                     CODE_SIGN_IDENTITY="" \
                     CODE_SIGNING_REQUIRED=NO
        fi

  release:
    name: Create Tag and Release
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Get latest tag and commit message
      id: get_tag
      run: |
        # Get the latest tag
        LATEST_TAG=$(git tag --sort=-version:refname | head -n1)
        echo "Latest tag found: $LATEST_TAG"
        echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT

        # Calculate new tag
        if [[ $LATEST_TAG =~ ^([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
          MAJOR=${BASH_REMATCH[1]}
          MINOR=${BASH_REMATCH[2]}
          PATCH=${BASH_REMATCH[3]}
          NEW_PATCH=$((PATCH + 1))
          NEW_TAG="$MAJOR.$MINOR.$NEW_PATCH"
          echo "Incrementing patch version: $LATEST_TAG -> $NEW_TAG"
        elif [[ -z "$LATEST_TAG" ]]; then
          NEW_TAG="1.0.0"
          echo "No previous tags found, starting with: $NEW_TAG"
        else
          echo "Invalid tag format: $LATEST_TAG"
          echo "Expected format: X.Y.Z (semantic versioning)"
          exit 1
        fi

        echo "new_tag=$NEW_TAG" >> $GITHUB_OUTPUT
        echo "New tag will be: $NEW_TAG"

        # Get the latest commit message and changelog
        COMMIT_MESSAGE=$(git log -1 --pretty=%B)
        echo "commit_message<<EOF" >> $GITHUB_OUTPUT
        echo "$COMMIT_MESSAGE" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
        # Get changelog since last tag
        if [[ -n "$LATEST_TAG" ]]; then
          CHANGELOG=$(git log --pretty=format:"- %s" $LATEST_TAG..HEAD)
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        else
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "- Initial release" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        fi

    - name: Create Git tag
      run: |
        NEW_TAG="${{ steps.get_tag.outputs.new_tag }}"
        
        # Check if tag already exists
        if git rev-parse "$NEW_TAG" >/dev/null 2>&1; then
          echo "Tag $NEW_TAG already exists!"
          exit 1
        fi
        
        # Configure git and create tag
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        
        echo "Creating tag: $NEW_TAG"
        git tag "$NEW_TAG"
        git push origin "$NEW_TAG"

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.get_tag.outputs.new_tag }}
        name: "Votice SDK v${{ steps.get_tag.outputs.new_tag }}"
        body: |
          ## ðŸš€ Votice SDK v${{ steps.get_tag.outputs.new_tag }}
          
          ### Changes in this release:
          ${{ steps.get_tag.outputs.changelog }}
          
          ### Latest commit:
          ${{ steps.get_tag.outputs.commit_message }}
          
          ### Installation
          
          #### Swift Package Manager
          Add this to your `Package.swift`:
          
          ```swift
          dependencies: [
              .package(url: "https://github.com/ArtCC/votice-sdk.git", from: "${{ steps.get_tag.outputs.new_tag }}")
          ]
          ```
          
          Or add it through Xcode:
          1. File â†’ Add Package Dependencies
          2. Enter: `https://github.com/ArtCC/votice-sdk.git`
          3. Select version: `${{ steps.get_tag.outputs.new_tag }}`
          
          ---
          *This release was automatically generated from commit ${{ github.sha }}*
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}