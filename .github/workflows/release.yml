name: Create Release

on:
  push:
    branches: [ main ]

jobs:
  test:
    name: Run Tests
    runs-on: macos-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Select Xcode Version
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '15.0'

    - name: Build and Test Swift Package
      run: swift test --verbose

    - name: Build iOS Example
      run: |
        cd Example/VoticeDemo
        xcodebuild -project VoticeDemo.xcodeproj \
                   -scheme VoticeDemo \
                   -destination 'platform=iOS Simulator,name=iPhone 15' \
                   build

    - name: Test iOS Example
      run: |
        cd Example/VoticeDemo
        xcodebuild -project VoticeDemo.xcodeproj \
                   -scheme VoticeDemo \
                   -destination 'platform=iOS Simulator,name=iPhone 15' \
                   test

  release:
    name: Create Tag and Release
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Get latest tag
      id: get_tag
      run: |
        LATEST_TAG=$(git tag --sort=-version:refname | head -n1)
        echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT

        if [[ $LATEST_TAG =~ ^([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
          MAJOR=${BASH_REMATCH[1]}
          MINOR=${BASH_REMATCH[2]}
          PATCH=${BASH_REMATCH[3]}
          NEW_PATCH=$((PATCH + 1))
          NEW_TAG="$MAJOR.$MINOR.$NEW_PATCH"
        else
          NEW_TAG="1.0.5"
        fi

        echo "new_tag=$NEW_TAG" >> $GITHUB_OUTPUT
        echo "New tag will be: $NEW_TAG"

    - name: Create Git tag
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git tag ${{ steps.get_tag.outputs.new_tag }}
        git push origin ${{ steps.get_tag.outputs.new_tag }}

    - name: Generate changelog
      id: changelog
      run: |
        LATEST="${{ steps.get_tag.outputs.latest_tag }}"
        if [ -z "$LATEST" ]; then
          COMMITS=$(git log --oneline --no-merges)
        else
          COMMITS=$(git log "$LATEST"..HEAD --oneline --no-merges)
        fi

        CHANGELOG="## Changes in ${{ steps.get_tag.outputs.new_tag }}

$COMMITS

---
*Release automatically generated by GitHub Actions*"

        echo "$CHANGELOG" > changelog.txt
        echo "changelog=$(<changelog.txt)" >> $GITHUB_OUTPUT

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.get_tag.outputs.new_tag }}
        name: "Votice SDK v${{ steps.get_tag.outputs.new_tag }}"
        body: ${{ steps.changelog.outputs.changelog }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
